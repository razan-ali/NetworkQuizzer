
import java.awt.Toolkit;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.ImageIcon;



/**
 *
 * @author razanali
 */
public class Client extends javax.swing.JFrame {
    
    
    static int questionCounter;//question counter 
    static int playerNo;//to indicate if this player is player1 or 2
    static Scanner fromServer ; //scanner to read from server 
    static PrintWriter toServer; //to send to the server 
    
    
    static java.awt.Image start = Toolkit.getDefaultToolkit().createImage("src/images/gameStart.gif");
    static java.awt.Image draw = Toolkit.getDefaultToolkit().createImage("src/images/draw.gif");
    static java.awt.Image win = Toolkit.getDefaultToolkit().createImage("src/images/win.gif");
    static java.awt.Image loss = Toolkit.getDefaultToolkit().createImage("src/images/loss.gif");
    static java.awt.Image rightAnswer = Toolkit.getDefaultToolkit().createImage("src/images/rightAnswer.gif");
    static java.awt.Image wrongAnswer = Toolkit.getDefaultToolkit().createImage("src/images/wrongAnswer.gif");
   

    /**
     * Creates new form client 
     */
    public Client() {
        
        initComponents();
        choiceA.setVisible(false);
        choiceB.setVisible(false);
        choiceC.setVisible(false);
        choiceD.setVisible(false);
        questionLabel.setVisible(false);
        submit.setVisible(false);
        QuestionNoAndResult.setVisible(false);
        characterGif.setIcon(new ImageIcon(start));  // set the game image to the label
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        choiceA = new javax.swing.JRadioButton();
        choiceB = new javax.swing.JRadioButton();
        choiceC = new javax.swing.JRadioButton();
        choiceD = new javax.swing.JRadioButton();
        questionLabel = new javax.swing.JLabel();
        playerNumber = new javax.swing.JLabel();
        turnIndicator = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        characterGif = new javax.swing.JLabel();
        QuestionNoAndResult = new javax.swing.JLabel();
        opponenResult = new javax.swing.JLabel();

        buttonGroup2.add(choiceA);
        buttonGroup2.add(choiceB);
        buttonGroup2.add(choiceC);
        buttonGroup2.add(choiceD);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(203, 217, 197));

        choiceA.setBackground(new java.awt.Color(203, 217, 197));
        choiceA.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        choiceA.setText(null);
        choiceA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceAActionPerformed(evt);
            }
        });

        choiceB.setBackground(new java.awt.Color(203, 217, 197));
        choiceB.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        choiceB.setText(null);
        choiceB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceBActionPerformed(evt);
            }
        });

        choiceC.setBackground(new java.awt.Color(203, 217, 197));
        choiceC.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        choiceC.setText(null);

        choiceD.setBackground(new java.awt.Color(203, 217, 197));
        choiceD.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        choiceD.setText(null);

        questionLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        questionLabel.setText(null);

        playerNumber.setFont(new java.awt.Font("Chalkduster", 1, 36)); // NOI18N
        playerNumber.setForeground(new java.awt.Color(201, 34, 39));
        playerNumber.setPreferredSize(new java.awt.Dimension(100, 100));

        turnIndicator.setFont(new java.awt.Font("Chalkboard", 0, 24)); // NOI18N
        turnIndicator.setForeground(new java.awt.Color(35, 52, 84));

        submit.setBackground(new java.awt.Color(203, 217, 197));
        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        characterGif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gameStart.gif"))); // NOI18N

        QuestionNoAndResult.setBackground(new java.awt.Color(203, 217, 197));
        QuestionNoAndResult.setFont(new java.awt.Font("Chalkduster", 1, 18)); // NOI18N
        QuestionNoAndResult.setForeground(new java.awt.Color(201, 34, 39));

        opponenResult.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(characterGif, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(playerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(choiceD)
                                    .addComponent(choiceC)
                                    .addComponent(choiceA, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choiceB, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(QuestionNoAndResult, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(opponenResult, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(turnIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submit)
                        .addGap(83, 83, 83))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(opponenResult, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(turnIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(QuestionNoAndResult, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choiceA, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(choiceB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(choiceC)
                                .addGap(18, 18, 18)
                                .addComponent(choiceD))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(submit))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(playerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(characterGif, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choiceAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceAActionPerformed
   
    }//GEN-LAST:event_choiceAActionPerformed

    private void choiceBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceBActionPerformed
        
    }//GEN-LAST:event_choiceBActionPerformed
    /**
     *  when the user press submit button, it will send the player choice to the server
     * 
     * @param evt 
     */
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        //send player choose to the server 
        if (choiceA.isSelected()) {  
            toServer.println("A");
        } else if (choiceB.isSelected()) { 
            toServer.println("B");
        } else if (choiceC.isSelected()) { 
            toServer.println("C");
        } else if (choiceD.isSelected()) {  
            toServer.println("D");
        }
        
        ///-----
        //set all element visibilety to false after submitting the choice 
        submit.setVisible(false);
        choiceA.setVisible(false);
        choiceB.setVisible(false);
        choiceC.setVisible(false);
        choiceD.setVisible(false);
        questionLabel.setVisible(false);
        opponenResult.setVisible(false);
        buttonGroup2.clearSelection();//clear slection
      
    }//GEN-LAST:event_submitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        new Client().setVisible(true);;
       
        
        Socket socket=null;
        try{
            //create a client socket that connect to server address at port number 2000
            socket = new Socket("127.0.0.1", 2000); //create new socket 
        }
        catch (ConnectException e) {
            //if server doesnt accept the connection
            System.out.println("Server is not accepting connections because it "
                             + "is not running or stacked (Connection refused: connect)");
            System.exit(0);//end program 
        }
        //input and output streams to read and write to server
        InputStream  fromServerInput = socket.getInputStream();
        OutputStream toServerOutput = socket.getOutputStream();
        
     
        fromServer = new Scanner(fromServerInput); //scanner to read input of server 
        toServer = new PrintWriter(toServerOutput, true);//printwriter to output data to server 
        
 
        String playerNumber = fromServer.nextLine(); //read the player number from server 
        //update GUI 
        Client.playerNumber.setText(playerNumber);
        
        playerNo = Integer.parseInt(playerNumber.substring(playerNumber.length()-1));
        if(playerNo==1)// if player number is 1 
            turnIndicator.setText(Client.fromServer.nextLine());//print that player 1 waiting for 2 to join
       
        
        while (fromServer.hasNextLine()){
           
            String rec=  fromServer.nextLine();//read input 
            if (rec.equalsIgnoreCase("Your Turn!")) {//if input equals to your turn 
               
                playerTurn(); //call player turn method 
                String result = fromServer.nextLine();//read result from server 
                if(result.contains("true")){//if player answer is true 
                    characterGif.setIcon(new ImageIcon(rightAnswer));//update the gif photo 
                    //show that player answer is correct 
                    QuestionNoAndResult.setText("<html>"+ "Your answered \nquestion No."+questionCounter+" Corectly "+"</html>");
                   
                }
                else if (result.contains("false")){
                    characterGif.setIcon(new ImageIcon(wrongAnswer));//update the gif photo 
                    //show that player answer is incorrect 
                    QuestionNoAndResult.setText("<html>"+ "WRONG Answer for question No." +questionCounter+"</html>");
                    
                }
            }
            //opponent turn 
            else if(rec.startsWith("Its now player "))
                opponentTurn(rec);
            
            //recive answer of the opponent  
            else if(rec.startsWith("Player 2") || rec.startsWith("Player 1")){
                opponenResult.setVisible(true);
                opponenResult.setText("<html>"+ rec +"</html>");
            }
             
            else if (rec.contains("YOU WON") || rec.contains("YOU LOST")  || rec.equalsIgnoreCase("DRAW")){//result of a game 
                    result(rec);
            }
            else if (rec.equalsIgnoreCase("close!"))//end of game                               
                break; //or in case on player leave the game it will close the socket 
             
        }
        //terminate the connection between the client and the server
        socket.close();//close socket 
       
    }
    /**
     * read question and choice from server and let player choose an answer 
     * and send it back to the server 
     * @throws IOException 
     */
    public static void playerTurn() throws IOException{
        questionCounter++;//increment number of playerTurn
        String questionNoStr = fromServer.next();//read the new playerTurn number 
        String questionStr = fromServer.nextLine();//read playerTurn from server 
        String choiceAstr =  fromServer.nextLine().trim();
        String choiceBstr =  fromServer.nextLine().trim();;
        String choiceCstr =  fromServer.nextLine().trim();;
        String choiceDstr =  fromServer.nextLine().trim();;
       
        //GUI update 
        characterGif.setIcon(new ImageIcon(start)); //update photo 
        turnIndicator.setText("Your Turn!");//update player turn label     
        questionLabel.setVisible(true);//let the playerTurn lable to be visible 
        QuestionNoAndResult.setVisible(true);
        QuestionNoAndResult.setText(questionNoStr);//update playerTurn number 
        questionLabel.setText("<html>"+ questionStr +"</html>");//read playerTurn from input file 
        //let all choicess to be visible 
        choiceA.setVisible(true);
        choiceB.setVisible(true);
        choiceC.setVisible(true);
        choiceD.setVisible(true);
        //and let submit button to be visible too 
        submit.setVisible(true);
        ///-------
        //read choices from input file
        Client.choiceA.setText("A."+choiceAstr.substring(0, choiceAstr.length()-2));
        Client.choiceB.setText("B."+choiceBstr.substring(0, choiceBstr.length()-2));
        Client.choiceC.setText("C."+choiceCstr.substring(0, choiceCstr.length()-2));
        Client.choiceD.setText("D."+choiceDstr.substring(0, choiceDstr.length()-2));
       
    }
    /**
     * when its the opponent turn player must wait till his finish his turn
     * 
     * @param line to indicate which player turn now 
     */
    public static void opponentTurn(String line){
        
        if(playerNo==2 && questionCounter==0){ //if its the first question and the player is player w
            //player 2 have to wait to player 1 to start the game 
            turnIndicator.setText("<html>"+ "Waiting for Player 1 to start game!" +"</html>");
        }
        else //print to the qui that now is the opponent turn 
            turnIndicator.setText("<html>"+ line +"</html>");    
        questionCounter++;//question number increment
    }
    
    /**
     * this method show the final result of the game 
     * @param rec 
     */
    public static void  result (String rec){
        //GUI updates 
        choiceA.setVisible(false);
        choiceB.setVisible(false);
        choiceC.setVisible(false);
        choiceD.setVisible(false); 
        submit.setVisible(false);
        questionLabel.setVisible(true);
        turnIndicator.setVisible(false);
        ///
        //to print team member names 
        questionLabel.setFont(new java.awt.Font("Lucida Grande", 1, 10)); // NOI18N
        String studentNames  = String.format("%-30s%d<br>%-30s%d<br>%-30s%d<br>%-30s%d<br>%-30s%d<br>","Asma",19,"Munera",19,"Randa",19,"Razan", 19 , "Tahani",19  );
        questionLabel.setText("<html>"+"TEAM MEMBERS:<br>"+studentNames+"<html>");
     
        
        //if the result is you lost 
        if(rec.equalsIgnoreCase("YOU LOST")){
            
            QuestionNoAndResult.setText("GAME OVER\nYOU LOST :(");
            characterGif.setIcon(new ImageIcon(loss));//change photo to loss gif 
          
            
        }//if result is you won 
        else if(rec.equalsIgnoreCase("YOU WON")){
            
            QuestionNoAndResult.setText("Congrats! Yon won :)");
            characterGif.setIcon(new ImageIcon(win));//change photo to win gif 
           
          
        }//if result draq
        else if(rec.equalsIgnoreCase("DRAW")){
                
            QuestionNoAndResult.setText("<html>"+"GAME OVER\nDRAW NO WINNER"+"<html>");
            characterGif.setIcon(new ImageIcon(draw));//change photo to draw gif 
                 
    }
            
       
    }
    //used GUI elements:
    //panels: jPanel1.
    //text area: jTextArea1.
    //labels: QuestionNoAndResult, characterGif, opponenResult, playerNumber, questionLabel, turnIndicator.
    //radio buttons: choiceA, choiceB, choiceC, choiceD, and buttonGroup2 is used to group the radio buttons together.
    //buttons: submit.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel QuestionNoAndResult;
    private javax.swing.ButtonGroup buttonGroup2;
    private static javax.swing.JLabel characterGif;
    public static javax.swing.JRadioButton choiceA;
    public static javax.swing.JRadioButton choiceB;
    public static javax.swing.JRadioButton choiceC;
    public static javax.swing.JRadioButton choiceD;
    public static javax.swing.JPanel jPanel1;
    private static javax.swing.JLabel opponenResult;
    public static javax.swing.JLabel playerNumber;
    private static javax.swing.JLabel questionLabel;
    public static javax.swing.JButton submit;
    public static javax.swing.JLabel turnIndicator;
    // End of variables declaration//GEN-END:variables
}